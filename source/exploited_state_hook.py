import angr
from helpers import hex2str

class exploited_execve(angr.SimProcedure):
    """
    Sample hook procedure to check if the programme is going to do `execve("/bin/sh"...)`
    If the check pass, project.exploited_state will be set.
    """
    def run(self, filename, args, envp):
        print("run into execve!") 

        # check if the first arg is like '/bin/sh'
        fname = self.state.memory.load(filename, 8)
        assert(fname.concrete)
        if b"sh" in hex2str(fname.args[0]):
            print("found exploited state")

            # set exploited_state, so we can get the final state from project
            assert(self.project and self.state)
            self.project.exploited_state = self.state
            # we don't need to continue
            self.exit(0)
        else:
            return claripy.BVV(0, 64)

    def __repr__(self):
        return '<exploited execve stub>'

def exploited_system(project):
    """
    Sample hook func to check if the programe is going to do `system("/bin/sh")`
    If the check pass, project.exploited_state will be set.

    :param:     replayer project, used to set exploited state
    """
    def hook_func(state):
        rdi = state.regs.rdi
        if rdi.concrete:
            command = state.memory.load(rdi, 8)
            if b"sh" in hex2str(command.args[0]):
                print("found exploited state")
                project.exploited_state = state
        else:
            return
    return hook_func